
Getting ConcurrentModificactionException when trying to remove item from the list at the same time when iterating myArrayList.

for (String str : myArrayList) {
    if (someCondition) {
        myArrayList.remove(str);
    }
}


Right way:
    Use an Iterator and call remove.


Iterator<String> iter = myArrayList.iterator();

while (iter.hasNext()) {
    String str = iter.next();

    if (someCondition)
        iter.remove();
}





    This exception may be thrown by methods that have detected concurrent modification of an object when such modification is not permissible.
    For example, it is not generally permissible for one thread to modify a Collection while another thread is iterating over it. In general, 
the results of the iteration are undefined under these circumstances. Some Iterator implementations (including those of all the general purpose 
collection implementations provided by the JRE) may choose to throw this exception if this behavior is detected. Iterators that do this are known 
as fail-fast iterators, as they fail quickly and cleanly, rather that risking arbitrary, non-deterministic behavior at an undetermined time in the future.